/*! Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 */
import { BroadcastClientError } from './errors';
/**
 * An enumeration describing the events emitted from the AmazonIVSBroadcastClient.
 */
export declare const BroadcastClientEvents: {
    /**
     * Indicates that the webRTC connection state has changed.
     *
     * @param payload - [[ConnectionState]]
     * @event connectionStateChange
     */
    readonly CONNECTION_STATE_CHANGE: "connectionStateChange";
    /**
     * Indicates that the client has encountered an error.
     *
     * @param payload - [[BroadcastClientError]]
     * @event clientError
     */
    readonly ERROR: "clientError";
    /**
     * Indicates that the broadcast start/stop state has changed.
     *
     * @param payload - [[boolean]]
     * @event activeStateChanged
     */
    readonly ACTIVE_STATE_CHANGE: "activeStateChange";
};
/**
 * An enumeration describing the events emitted from the PeerClient
 */
export declare const PeerClientEvents: {
    /**
     * Indicates that the webRTC connection state has changed.
     *
     * @param payload - [[ConnectionState]]
     * @event connectionStateChange
     */
    readonly CONNECTION_STATE_CHANGE: "connectionStateChange";
    /**
     * Indicates that the client has encountered an error.
     *
     * @param payload - [[BroadcastClientError]]
     * @event clientError
     */
    readonly ERROR: "clientError";
};
/**
 * An enumeration describing the connection state of the webRTC stream.
 */
export declare enum ConnectionState {
    /**
     * Indicates the webRTC connection is closed.
     */
    CLOSED = "closed",
    /**
     * Indicates that the webRTC connection is completed.
     */
    COMPLETED = "completed",
    /**
     * Indicates that the webRTC connection is connected.
     */
    CONNECTED = "connected",
    /**
     * Indicates that the webRTC connection is connecting.
     */
    CONNECTING = "connecting",
    /**
     * Indicates that the webRTC connection is disconnected.
     */
    DISCONNECTED = "disconnected",
    /**
     * Indicates that the webRTC connection has failed.
     */
    FAILED = "failed",
    /**
     * Indicates that the webRTC connection is idle.
     */
    IDLE = "idle",
    /**
     * Indicates that a new webRTC connection has been created but has not yet started connecting to the server.
     */
    NEW = "new",
    /**
     * Indicates that the webRTC connection has been deleted or does not yet exist.
     */
    NONE = "none"
}
/**
 * Helper interface for creating TypeScript-capable Event Emitter implementations.
 * This maps the [[BroadcastClientEvents]] to their respective payload type.
 */
export interface BroadcastClientEventPayloads {
    /**
     * Maps the [[BroadcastClientEvents.ERROR]] type to [[BroadcastClientError]].
     */
    [BroadcastClientEvents.ERROR]: BroadcastClientError;
    /**
     * Maps the [[BroadcastClientEvents.CONNECTION_STATE_CHANGE]] type to 'string'.
     */
    [BroadcastClientEvents.CONNECTION_STATE_CHANGE]: string;
    /**
     * Maps the [[BroadcastClientEvents.ACTIVE_STATE_CHANGE]] type to 'boolean'.
     */
    [BroadcastClientEvents.ACTIVE_STATE_CHANGE]: boolean;
}
/**
 * Helper interface for creating TypeScript-capable Event Emitter implementations.
 * This maps the [[PeerClientEvents]] to their respective payload type.
 */
export interface PeerClientEventPayloads {
    /**
     * Maps the [[BroadcastClientEvents.ERROR]] type to [[BroadcastClientError]].
     */
    [PeerClientEvents.ERROR]: BroadcastClientError;
    /**
     * Maps the [[BroadcastClientEvents.CONNECTION_STATE_CHANGE]] type to 'string'.
     */
    [PeerClientEvents.CONNECTION_STATE_CHANGE]: string;
}
