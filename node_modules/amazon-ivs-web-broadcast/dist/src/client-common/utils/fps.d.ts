/*! Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 */
/**
 * Utility class that logs the measured FPS to the console
 * The sampleSize is the precision of the measurement. This can match the current target frameRate
 * Call the `measure` method and pass in 2 DOMHighResTimeStamp from `performance.now()`
 *
 * @example
 * ```typescript
 * const fps = new FPS({ sampleSize: 60 });
 * function myCoolFunction() {
 *   const start = performance.now();
 *   // do things
 *   const end = performance.now() - start;
 *   fps.measure(start, end);
 * }
 * ```
 */
export declare class FPS {
    private previousTime;
    private pos;
    private fTimes;
    private bTimes;
    /**
     * Create the FPS logger.
     *
     * @param {number} sampleSize - The sampleSize precision
     */
    constructor(sampleSize?: number);
    /**
     * Measures the time difference between the start and end times with sampleSize amount of precision
     * and logs the result to to the console.
     *
     * @param {DOMHighResTimeStamp} startTime - The beginning of the function's execution
     * @param {DOMHighResTimeStamp} endTime - The end of the function's execution
     */
    measure: (startTime: DOMHighResTimeStamp, endTime: DOMHighResTimeStamp) => void;
    /**
     * Calculates the mean time given a set of frequencies.
     *
     * @param {number} t - The total of the provided frequencies.
     * @param {number} f - The current frequency.
     */
    private mean;
}
