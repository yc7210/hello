/*! Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 */
/**
 * Utility class that exposes methods to manage a collection of AbortControllers
 */
export declare class AbortControllersTracker {
    private abortControllers;
    private _isUnloading;
    private static instance;
    /**
     * Creates the AbortControllersTracker.
     *
     * @returns {AbortControllersTracker} A singleton instance of [[AbortControllersTracker]]
     */
    private constructor();
    /**
     * Gets the singleton instance of AbortControllersTracker.
     *
     * @returns {AbortControllersTracker} A singleton isntance of [[AbortControllersTracker]]
     */
    static getInstance(): AbortControllersTracker;
    /**
     * Abort all tracked operations.
     */
    abortPendingOperations(): void;
    /**
     * Add a new abort controller.
     *
     * @param identifier - key to map controller to.
     * @returns {AbortController} - newly tracked abort controller.
     */
    trackNewAbortController(identifier: string): AbortController;
    /**
     * Remove an abort controller.
     *
     * @param identifier - key mapping to the controller.
     */
    removeAbortController(identifier: string): void;
    /**
     * Get isUnloading.
     *
     * @returns isUnloading value to determine if `beforeUnload` event has been fired.
     */
    get isUnloading(): boolean;
    /**
     * Set isUnloading.
     *
     * @param isUnloading - The new isUnloading value to set.
     */
    set isUnloading(isUnloading: boolean);
}
