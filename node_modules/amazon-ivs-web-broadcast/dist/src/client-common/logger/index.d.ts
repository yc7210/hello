import { Config } from '../../broadcast/configuration';
import { LoggerScope, type LogMessage, type ErrorLogMessage } from './logger.types';
/**
 * A utility that provides pretty-print logging to the console.
 *
 * @param config - Injected instance of Config for this logger
 */
declare class Logger {
    private config;
    private logLevel;
    private loggerInstance;
    /**
     * Instantiates a [[Logger]].
     *
     * @param config - An instance of [[Config]].
     */
    constructor(config: Config);
    /**
     * Wrapper for `debug` logs.
     *
     * @param log - Log parameters of type [[LogMessage]].
     */
    debug(log: LogMessage): void;
    /**
     * Wrapper for `info` logs.
     *
     * @param log - Log parameters of type [[LogMessage]].
     */
    info(log: LogMessage): void;
    /**
     * Wrapper for `warn` logs.
     *
     * @param log - Log parameters of type [[LogMessage]].
     */
    warn(log: LogMessage): void;
    /**
     * Wrapper for `error` logs.
     *
     * @param parameters - Configuration object for the logger.
     * @param parameters.err - The error that should be logged.
     * @param parameters.log - Optional details to log.
     */
    error({ err, ...log }: ErrorLogMessage): void;
}
/**
 * A utility that provides pretty-print logging to the console.
 */
declare class ScopedLogger {
    private logger;
    private scope;
    /**
     * Instantiates a [[ScopedLogger]].
     *
     * @param logger - An instance of [[Logger]].
     * @param scope - Scope for logging [[LoggerScope]].
     */
    constructor(logger: Logger, scope: LoggerScope);
    /**
     * Wrapper for `debug` logs.
     *
     * @param log - Log parameters of type [[LogMessage]].
     */
    debug(log: LogMessage): void;
    /**
     * Wrapper for `info` logs.
     *
     * @param log - Log parameters of type [[LogMessage]].
     */
    info(log: LogMessage): void;
    /**
     * Wrapper for `warn` logs.
     *
     * @param log - Log parameters of type [[LogMessage]].
     */
    warn(log: LogMessage): void;
    /**
     * Wrapper for `error` logs.
     *
     * @param parameters - Configuration object for the logger.
     * @param parameters.err - The error that should be logged.
     * @param parameters.log - Optional details to log.
     */
    error({ err, ...log }: ErrorLogMessage): void;
    /**
     * Helper func to allow for access to the underlying logger
     */
    unwrap(): Logger;
}
export { Logger, LoggerScope, ScopedLogger };
