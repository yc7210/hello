/*! Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 */
import { AxiosError } from 'axios';
import { BroadcastClientError } from '../../../client-common/errors';
import { type StageToken } from '../token';
import { type TraceId, type RequestUUID } from '../analytics/random.uuid';
import { Action } from '../constants';
export interface StageErrorParams {
    token: StageToken;
    traceId: TraceId;
    code: number;
    tag: string;
    location: string;
    message: string;
    details?: string;
    remoteParticipantId?: string;
    requestUUID?: RequestUUID;
}
/**
 * Class describing Stage related errors encountered when using the AmazonIVSBroadcastStageClient.
 */
export declare class StageClientError extends BroadcastClientError {
    token: StageToken;
    traceId: TraceId;
    code: number;
    tag: string;
    location: string;
    message: string;
    details?: string;
    remoteParticipantId?: string;
    requestUUID?: RequestUUID;
    /**
     * Creates the new error.
     *
     * @param parameters - Object containing the Error parameters.
     * @param parameters.token - The stage token.
     * @param parameters.traceId - The traceID for the stage error.
     * @param parameters.code - The code for the error.
     * @param parameters.tag - The error tag.
     * @param parameters.message - The error message.
     * @param parameters.remoteParticipantId - The remote participant ID for this stage user, if applicable.
     * @param parameters.requestUUID - The request UUID, if applicable.
     */
    constructor({ token, traceId, code, tag, location, message, details, remoteParticipantId, requestUUID, }: StageErrorParams);
}
export declare const ERROR_TAGS: {
    readonly JOIN_RELATED: "signalling_session";
    readonly PUBLISH_RELATED: "webrtc_sink";
    readonly UNPUBLISH_RELATED: "webrtc_unsink";
};
export declare function errorTagByAction(action: Action, subscriberId?: string): string;
export declare function errorCodeAndMessage(stageClientError: {
    code: number;
    message: string;
}, error: Error): {
    code: number;
    message: string;
};
export declare function convertToStageErrorProps(error: AxiosError): {
    readonly code: 1001;
    readonly message: "Token expired and is no longer valid";
} | {
    readonly code: 1024;
    readonly message: "Stage at capacity";
} | {
    readonly code: 1025;
    readonly message: "Internal server error";
} | {
    readonly code: 1026;
    readonly message: "Token permissions are not valid for the operation";
} | {
    readonly code: 1099;
    readonly message: "Service error code unknown or not found";
} | {
    readonly code: 1206;
    readonly message: "WHIP signaling session resource not found";
} | {
    readonly code: 1207;
    readonly message: "WHIP endpoint received too many requests";
} | undefined;
export declare enum MERCURY_ERRORS {
    Unspecified = 2001,
    TokenExpired = 2002,
    NoPermissions = 2003,
    StageAtCapacity = 2005
}
export declare const STAGE_ERRORS: {
    /**
     * Stage session related errors. (1000 - 1099)
     */
    readonly EXPIRED_TOKEN: {
        readonly code: 1001;
        readonly message: "Token expired and is no longer valid";
    };
    readonly UNPUBLISH_FAILURE: {
        readonly code: 1013;
        readonly message: "Failed to unpublish";
    };
    readonly UNSUBSCRIBE_FAILURE: {
        readonly code: 1014;
        readonly message: "Failed to unsubscribe";
    };
    readonly PUBLISH_FAILURE: {
        readonly code: 1015;
        readonly message: "Failed to publish";
    };
    readonly SUBSCRIBE_FAILURE: {
        readonly code: 1016;
        readonly message: "Failed to subscribe";
    };
    readonly JOIN_FAILURE: {
        readonly code: 1017;
        readonly message: "Failed to join";
    };
    readonly PUBLISH_TIMED_OUT: {
        readonly code: 1020;
        readonly message: "Publish timed out";
    };
    readonly SUBSCRIBE_TIMED_OUT: {
        readonly code: 1021;
        readonly message: "Subscribe timed out";
    };
    readonly NO_CANDIDATES: {
        readonly code: 1022;
        readonly message: "No ICE candidates";
    };
    readonly OPERATION_ABORTED: {
        readonly code: 1023;
        readonly message: "Request aborted";
    };
    readonly STAGE_AT_CAPACITY: {
        readonly code: 1024;
        readonly message: "Stage at capacity";
    };
    readonly INTERNAL_SERVER_ERROR: {
        readonly code: 1025;
        readonly message: "Internal server error";
    };
    readonly TOKEN_PERMISSIONS_DENIED: {
        readonly code: 1026;
        readonly message: "Token permissions are not valid for the operation";
    };
    readonly UNKNOWN_PERMISSIONS_ERROR: {
        readonly code: 1099;
        readonly message: "Service error code unknown or not found";
    };
    /**
     * Signaling session (WHIP exchange + websocket) related errors. (1200 - 1299)
     */
    readonly WEBSOCKET_MESSAGE_PARSE_FAILURE: {
        readonly code: 1204;
        readonly message: "Failed to parse websocket message";
    };
    readonly WHIP_SESSION_RESOURCE_DELETED: {
        readonly code: 1206;
        readonly message: "WHIP signaling session resource not found";
    };
    readonly WHIP_TOO_MANY_REQUESTS: {
        readonly code: 1207;
        readonly message: "WHIP endpoint received too many requests";
    };
    readonly WHIP_OPTIONS_FAILURE: {
        readonly code: 1501;
        readonly message: "Failed to get ICE Servers from OPTIONS";
    };
    readonly WHIP_POST_FAILURE: {
        readonly code: 1502;
        readonly message: "WHIP post failure";
    };
    readonly WHIP_DELETE_FAILURE: {
        readonly code: 1503;
        readonly message: "WHIP delete failure";
    };
    readonly WHIP_URL_MISSING: {
        readonly code: 1504;
        readonly message: "WHIP delete failure";
    };
    /**
     * Event data plane related errors. (1300 - 1399)
     */
    readonly EVENT_PLANE_CONNECTION_FAILURE: {
        readonly code: 1300;
        readonly message: "Error connecting to event plane";
    };
    /**
     * Peer Connection related errors. (1400 - 1499)
     */
    readonly PEER_CONNECTION_NETWORK_FAILURE: {
        readonly code: 1400;
        readonly message: "PeerConnection is lost due to unknown network error";
    };
    readonly CREATE_OFFER_FAILURE: {
        readonly code: 1402;
        readonly message: "Failed to set local description";
    };
    readonly CREATE_PEER_CONNECTION_FAILURE: {
        readonly code: 1403;
        readonly message: "Failed to create a peer connection";
    };
    readonly ICE_CANDIDATE_ERROR: {
        readonly code: 1404;
        readonly message: "ICE candidate error";
    };
};
export declare enum STAGE_PUBSUB_ENDED_REASON {
    UNPUBLISH = "unpublish",
    UNSUBSCRIBE = "unsubscribe",
    UNLOAD = "unload",
    CONNECTION_FAIL = "connection fail"
}
