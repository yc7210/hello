import { Logger } from '../../client-common/logger';
import { BroadcastStageSocketEventPayloads } from './stage-events';
import { StageToken } from './token';
export declare enum StageSocketMessageEvent {
    MESSAGE = "message",
    RESPONSE = "response"
}
/**
 * StageSocket is responsible for managing the WebSocket connection to IVS
 * Stages, hiding the details of ping/pong, connection retries, and parsing
 * received message types.
 *
 * It retries connecting with exponential backoff if it fails to connect.
 * When it opens, it triggers an "open" event.
 * If it closes unexpectedly, it triggers a "connection_failure" event.
 * It handles pings/pongs.
 * If it is closed, it triggers a "closed" event when it closes.
 * If it receives a STAGE_STATE type message from Stages, it triggers a "STAGE_STATE" event.
 * If it receives a REFRESH type message from Stages, it triggers a "REFRESH" event.
 */
export declare class StageSocket {
    protocol: string;
    private addr?;
    private token?;
    private connectionAttempts;
    private sentPing;
    private id;
    private receivedPong;
    private logger;
    private connecting;
    private socket?;
    private closing;
    private closingForError;
    private nextConnectionAttempt;
    private windowUnloading;
    private pingInterval;
    private pongTimeout;
    private emitter;
    private latestSequenceNumber;
    constructor(logger: Logger);
    connect(addr: string, token: StageToken): void;
    send(data: object): void;
    /**
     * Explicit close
     */
    close(): void;
    removeAllListeners(): void;
    private createWebSocket;
    private closeForError;
    private closeSocket;
    /**
     * Registers (starts) a specified callback to a specified event.
     *
     * @param event - The event to listen to.
     * @param callback - The callback that will called when the event is fired.
     */
    on<Key extends keyof BroadcastStageSocketEventPayloads & string>(event: Key, callback: (value: BroadcastStageSocketEventPayloads[Key]) => void): void;
    /**
     * Deregisters (stops) a specified callback to a given event.
     *
     * @param event - The event to which the callback was registered.
     * @param callback - The callback to remove.
     */
    off<Key extends keyof BroadcastStageSocketEventPayloads & string>(event: Key, callback: (value: BroadcastStageSocketEventPayloads[Key]) => void): void;
    private isReady;
    private onMessage;
    private onError;
    private onClose;
    private onOpen;
    private ping;
    private pongTimedOut;
    private clearTimeouts;
    private beforeUnload;
}
