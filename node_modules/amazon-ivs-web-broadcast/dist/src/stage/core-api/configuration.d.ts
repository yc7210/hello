import { Logger, LogLevels } from '../../client-common/logger/logger.types';
import { StreamConfig } from '../../broadcast/configuration';
export declare const STAGE_MIN_BITRATE = 200;
export declare const STAGE_MAX_BITRATE = 2500;
export declare const STAGE_MIN_FRAMERATE = 10;
export declare const STAGE_MAX_FRAMERATE = 30;
export declare const STAGE_MIN_RESOLUTION = 160;
export declare const STAGE_MAX_RESOLUTION = 1280;
export declare const STAGE_SECONDARY_MAX_RESOLUTION = 720;
export declare const stageBitrateErrorDetails: string;
export declare const stageFramerateErrorDetails: string;
export declare const stageResolutionErrorDetails: string;
export declare const DEFAULT_STAGE_LANDSCAPE: {
    maxResolution: {
        width: number;
        height: number;
    };
    maxFramerate: number;
    /**
     * maxBitrate is measured in kilobits
     */
    maxBitrate: number;
};
export declare const DEFAULT_STAGE_PORTRAIT: {
    maxResolution: {
        width: number;
        height: number;
    };
    maxFramerate: number;
    /**
     * maxBitrate is measured in kilobits
     */
    maxBitrate: number;
};
/**
 * The configuration used to initialize the BroadcastStageClient.
 */
export interface StageClientConfig {
    logLevel?: LogLevels;
    logger?: Partial<Logger>;
    streamConfig?: StreamConfig;
    whipUrlOverride?: string;
}
export interface DefaultStageConfig {
    LOG_LEVEL: typeof LogLevels;
    DEFAULT_STAGE_LANDSCAPE: typeof DEFAULT_STAGE_LANDSCAPE;
    DEFAULT_STAGE_PORTRAIT: typeof DEFAULT_STAGE_PORTRAIT;
}
export declare const defaultStageConfig: DefaultStageConfig;
export declare type ConfigurationInstance = Partial<StageClientConfig> & StageConfig;
/**
 * The Config class is a singleton that holds the configuration for the application
 */
export declare class StageConfig {
    #private;
    LOG_LEVEL: typeof LogLevels;
    DEFAULT_STAGE_LANDSCAPE: {
        maxResolution: {
            width: number;
            height: number;
        };
        maxFramerate: number;
        /**
         * maxBitrate is measured in kilobits
         */
        maxBitrate: number;
    };
    DEFAULT_STAGE_PORTRAIT: {
        maxResolution: {
            width: number;
            height: number;
        };
        maxFramerate: number;
        /**
         * maxBitrate is measured in kilobits
         */
        maxBitrate: number;
    };
    constructor(streamConfig?: StreamConfig, logLevel?: LogLevels, logger?: Partial<Logger>);
    /**
     * Get the stream config.
     *
     * @returns The streamConfig property is a getter that returns the streamConfig property of the class.
     */
    get streamConfig(): StreamConfig;
    /**
     * Set the streamConfig property to the newStreamConfig parameter.
     *
     * The function is a setter, so it has a special name
     *
     * @param newStreamConfig - The new stream configuration.
     */
    set streamConfig(newStreamConfig: unknown);
    /**
     * Get the log level.
     *
     * @returns The log level.
     */
    get logLevel(): LogLevels | undefined;
    /**
     * Set the log level to the given value.
     *
     * @param newLogLevel - The new log level to set.
     */
    set logLevel(newLogLevel: unknown);
    /**
     * Get the logger property from the config.
     *
     * @returns The logger property is being returned.
     */
    get logger(): Partial<Logger> | undefined;
    /**
     * Set the logger property.
     *
     * @param newLogger - The new logger to set.
     */
    set logger(newLogger: Partial<Logger> | undefined);
    /**
     * Get the optional WHIP URL override.
     *
     * @returns WHIP URL override or undefined if not set.
     */
    get whipUrlOverride(): string | undefined;
    /**
     * Set the WHIP URL override.
     *
     * @param newUrl - The new override URL.
     */
    set whipUrlOverride(newUrl: unknown);
}
