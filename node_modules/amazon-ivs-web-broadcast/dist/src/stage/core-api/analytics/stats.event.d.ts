import { StageToken } from '../token';
import { StageAnalyticsEvent } from './event';
import { TraceId } from './random.uuid';
/**
 * A class derived from StageAnalyticsEvent to handle published video stats.
 */
export declare class PublishedVideoStatsEvent extends StageAnalyticsEvent {
    /**
     * Creates a PublishedVideoStatsEvent.
     *
     * @param token - Caller participant's stage token.
     * @param traceId - Trace identifier used to group actions together.
     * @param stats - Relevant video stats to be logged.
     */
    constructor(token: StageToken, traceId: TraceId, stats: Record<string, unknown>);
}
/**
 * A class derived from StageAnalyticsEvent to handle published audio stats.
 */
export declare class PublishedAudioStatsEvent extends StageAnalyticsEvent {
    /**
     * Creates a PublishedAudioStatsEvent.
     *
     * @param token - Caller participant's stage token.
     * @param traceId - Trace identifier used to group actions together.
     * @param stats - Relevant audio stats to be logged.
     */
    constructor(token: StageToken, traceId: TraceId, stats: Record<string, unknown>);
}
/**
 * A class derived from StageAnalyticsEvent to handle subscribed video stats.
 */
export declare class SubscribedVideoStatsEvent extends StageAnalyticsEvent {
    /**
     * Creates a SubscribedVideoStatsEvent.
     *
     * @param token - Caller participant's stage token.
     * @param traceId - Trace identifier used to group actions together.
     * @param remoteParticipantID - The remote participant's identifier.
     * @param stats - Relevant audio stats to be logged.
     */
    constructor(token: StageToken, traceId: TraceId, remoteParticipantID: string, stats: Record<string, unknown>);
}
/**
 * A class derived from StageAnalyticsEvent to handle subscribed audio stats.
 */
export declare class SubscribedAudioStatsEvent extends StageAnalyticsEvent {
    /**
     * Creates tbe SubscribedAudioStatsEvent.
     *
     * @param token - Caller participant's stage token.
     * @param traceId - Trace identifier used to group actions together.
     * @param remoteParticipantID - The remote participant's identifier.
     * @param stats - Relevant audio stats to be logged.
     */
    constructor(token: StageToken, traceId: TraceId, remoteParticipantID: string, stats: Record<string, unknown>);
}
