import { type StageToken } from '../token';
import { StageAnalyticsEvent } from './event';
import { TraceId } from './random.uuid';
export declare class PublishEvent extends StageAnalyticsEvent {
    constructor(properties: {
        token: StageToken;
        traceId: TraceId;
    });
}
export declare class UnpublishEvent extends StageAnalyticsEvent {
    constructor(properties: {
        token: StageToken;
        traceId: TraceId;
    });
}
export declare class SubscribeEvent extends StageAnalyticsEvent {
    constructor(properties: {
        token: StageToken;
        traceId: TraceId;
        subscribedId: string;
    });
}
export declare class UnsubscribeEvent extends StageAnalyticsEvent {
    constructor(properties: {
        token: StageToken;
        traceId: TraceId;
        unsubscribedId: string;
    });
}
export declare class PublishStartedEvent extends StageAnalyticsEvent {
    constructor(properties: {
        token: StageToken;
        traceId: TraceId;
        optionsDuration: number;
        postDuration: number;
        timeToCandidate: number;
        totalDuration: number;
    });
}
export declare class PublishEndedEvent extends StageAnalyticsEvent {
    constructor(properties: {
        token: StageToken;
        traceId: TraceId;
        isUnpublishSuccessful: boolean;
        reason: string;
    });
}
export declare class SubscribeStartedEvent extends StageAnalyticsEvent {
    constructor(properties: {
        token: StageToken;
        traceId: TraceId;
        remoteParticipantId: string;
        optionsDuration: number;
        postDuration: number;
        timeToCandidate: number;
        totalDuration: number;
    });
}
export declare class SubscribeEndedEvent extends StageAnalyticsEvent {
    constructor(properties: {
        token: StageToken;
        traceId: TraceId;
        remoteParticipantId: string;
        isUnsubscribeSuccessful: boolean;
        reason: string;
    });
}
export declare class StateUpdatedEvent extends StageAnalyticsEvent {
    constructor(properties: {
        token: StageToken;
        otherParticipantId: string;
        otherParticipantUserId: string;
        isAudioMuted: boolean;
        isVideoStopped: boolean;
        isPublishing: boolean;
        isDisconnected: boolean;
        traceId: TraceId;
    });
}
