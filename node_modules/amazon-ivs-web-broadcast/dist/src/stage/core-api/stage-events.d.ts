/*! Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 */
import { Participant, StageStateMessage } from './stage-connection';
import { SubscriptionConnectionState } from './stage-subscription';
export declare const BroadcastStageConnectionEvents: {
    /**
     * Indicates that a Stage has been joined.
     *
     * @param payload - [[ConnectionState]]
     * @event stageJoined
     */
    readonly STAGE_JOINED: "stageJoined";
    /**
     * Indicates that a participant joined the stage
     *
     * @param payload - [[BroadcastClientError]]
     * @event stageParticipantJoined
     */
    readonly STAGE_PARTICIPANT_JOINED: "stageParticipantJoined";
    /**
     * Indicates that a participant left the stage
     *
     * @param payload - [[boolean]]
     * @event stageParticipantLeft
     */
    readonly STAGE_PARTICIPANT_LEFT: "stageParticipantLeft";
    /**
     * Indicates that a participant was kicked from the stage
     *
     * @param payload - [[boolean]]
     * @event stageParticipantKicked
     */
    readonly STAGE_PARTICIPANT_KICKED: "stageParticipantKicked";
    /**
     * Indicates that a participant has an updated state
     *
     * @param payload - [[boolean]]
     * @event stageParticipantUpdated
     */
    readonly STAGE_PARTICIPANT_UPDATED: "stageParticipantUpdated";
    /**
     * Indicates that a Stage has refreshed
     *
     * @param payload - [[boolean]]
     * @event stageRefresh
     */
    readonly STAGE_REFRESH: "stageRefresh";
    /**
     * Indicates that a Stage connection state has changed
     *
     * @param payload - [[boolean]]
     * @event stageRefresh
     */
    readonly STATE_CHANGE: "stateChange";
};
export declare const BroadcastStageSubscriptionEvents: {
    /**
     * Indicates that subscription state has changed
     *
     * @param payload - [[SubscriptionConnectionState]]
     * @event connectionState
     */
    readonly CONNECTION_STATE_CHANGE: "connectionStateChange";
    /**
     * Indicates that a StageStream is ready
     *
     * @param payload - [[MediaStream]]
     * @event connectionState
     */
    readonly STAGE_STREAM_UPDATE: "stageStreamUpdate";
};
export declare const BroadcastStageSocketEvents: {
    /**
     * Indicates that the socket has opened
     */
    readonly OPEN: "open";
    /**
     * Indicates that the socket has closed
     */
    readonly CLOSE: "close";
    /**
     * Indicates that an error occurred parsing a message.
     */
    readonly MESSAGE_PARSE_ERROR: "messageParseError";
    /**
     * Indicates that the socket has closed
     */
    readonly REFRESH: "refresh";
    /**
     * Indicates that the socket has encountered an error during connection
     */
    readonly CONNECTION_FAILURE: "connectionFailure";
    /**
     * Indicates that stage socket has received a message
     *
     * @param payload - [[object]]
     * @event message
     */
    readonly STAGE_STATE_MESSAGE: "stageStateMessage";
};
/**
 * Helper interface for creating TypeScript-capable Event Emitter implementations.
 */
export interface BroadcastStageConnectionEventPayloads {
    [BroadcastStageConnectionEvents.STAGE_PARTICIPANT_JOINED]: Participant;
    [BroadcastStageConnectionEvents.STAGE_PARTICIPANT_LEFT]: Participant;
    [BroadcastStageConnectionEvents.STAGE_PARTICIPANT_KICKED]: Participant;
    [BroadcastStageConnectionEvents.STAGE_PARTICIPANT_UPDATED]: Participant;
}
export interface BroadcastStageSubscriptionEventPayloads {
    [BroadcastStageSubscriptionEvents.CONNECTION_STATE_CHANGE]: SubscriptionConnectionState;
    [BroadcastStageSubscriptionEvents.STAGE_STREAM_UPDATE]: MediaStream;
}
export interface BroadcastStageSocketEventPayloads {
    [BroadcastStageSocketEvents.CONNECTION_FAILURE]: Error;
    [BroadcastStageSocketEvents.OPEN]: {
        attempts: number;
    };
    [BroadcastStageSocketEvents.CLOSE]: string;
    [BroadcastStageSocketEvents.STAGE_STATE_MESSAGE]: StageStateMessage;
    [BroadcastStageSocketEvents.MESSAGE_PARSE_ERROR]: Error;
    [BroadcastStageSocketEvents.REFRESH]: void;
}
