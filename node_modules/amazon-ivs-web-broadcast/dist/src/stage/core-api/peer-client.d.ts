import { WHIPResource } from '../../client-common/types';
import { ConnectionState, PeerClientEventPayloads } from '../../client-common/broadcast-client-events';
import { Logger } from '../../client-common/logger';
import { type Report } from '../../client-common/peer-client.types';
import { TraceId } from './analytics/random.uuid';
import { Action } from './constants';
import { type StageToken } from './token';
/**
 * A utility class wrapping the RTCPeerConnection instantiation and lifecycle management.
 */
export declare class StagePeerClient {
    /**
     * @param peerConnection - An RTCPeerConnection.
     */
    peerConnection?: RTCPeerConnection;
    whipResource?: WHIPResource;
    whipUrlOverride?: string;
    traceId: TraceId;
    private token;
    private action;
    private analyticsTracker;
    private logger;
    private tag;
    private emitter;
    private subscriberId?;
    private perfTracker;
    private tracks;
    private responseURL?;
    private sentOffer;
    private videoTransceiver?;
    private v2;
    private minutesLogged;
    private minutesUploadedInterval?;
    private uploadStatsInterval?;
    /**
     * Creates an instance of the [[PeerClient]].
     *
     * @param token - The stage token to use to connect.
     * @param logger - The logger to use for logs.
     * @param action - the Action relating to the relationship between localhost and edge (publish or subscribe)
     * @param tag - The tag to be applied to errors.
     */
    constructor(token: StageToken, logger: Logger, action: Action, tag: string, traceId: TraceId, subscriberId?: string, whipUrlOverride?: string);
    setV2(): void;
    connect: (audioOnly: boolean | undefined, traceId: TraceId) => Promise<{
        mediaStream: MediaStream | null;
    }>;
    disconnect: () => Promise<void>;
    /**
     * Gets credentials, creates the peer client, and adds event listeners
     *
     * @param traceId - The TraceId with this request
     */
    private start;
    private onTrack;
    private onIceGatheringStateChange;
    private onIceCandidate;
    private onMute;
    private onUnMute;
    /**
     * Tries to stop the remote video track
     */
    stopRemoteVideo: () => void;
    /**
     * Tries to restart the remote video track
     */
    startRemoteVideo: () => void;
    private sendMediaControlsRequest;
    private fetchAndSetRemoteDescription;
    /**
     * Terminates the WebRTC IVS connection and does a clean up of the RTCPeerConnection.
     */
    stop(): void;
    /**
     * Clean up backend resources allocated to track the peer connection.
     *
     * @param action - The nature of the operation tied to the cleanup (unpublish / unsubscribe)
     * @param participantId - The remote or local participant id depending on the operation.
     * @param token - The stage token used to previously publish / subscribe.
     * @param traceId - Trace identifier used to group actions together.
     */
    cleanup: (action: Action, remoteParticipantId: string, token: StageToken) => Promise<void>;
    /**
     * Gets the current state of the [[RTCPeerConnection]].
     */
    getConnectionState: () => ConnectionState;
    /**
     * Gets the peer connection object from the Stage client. This will throw if
     * no peer connection object has been initialized.
     *
     * @returns RTCPeerConnection object
     */
    getValidPeerConnectionCanThrow: () => RTCPeerConnection;
    private getTransceiverForKind;
    removeTrack(trackType: string): Promise<void>;
    /**
     * Given a MediaStreamTrack replace the Transceiver of the same type.
     *
     * @param track - track to use
     */
    replaceTrack(track: MediaStreamTrack): Promise<void>;
    private addTransceivers;
    /**
     * Gets the list of reports from the RTCStatsReport array.
     */
    getReports(): Promise<Report[]>;
    /**
     * Returns report for given track
     */
    requestRTCStats(track: MediaStreamTrack): Promise<RTCStatsReport | undefined>;
    /**
     * Handles ICE candidate errors.
     */
    private onIceCandidateError;
    /**
     * Handles ICE connection state changes
     *
     * @private
     */
    private onIceConnectionStateChange;
    private get identifier();
    /**
     * Emits Spade events with media track stats on [[ConnectionState]] changes.
     *
     * @private
     */
    private onConnectionStateChange;
    /**
     * Emits spade events when we are in a failed state
     *
     * @private
     */
    private handleConnectionFailure;
    /**
     * Logs peer connection stats.
     */
    private uploadStats;
    /**
     * Helper method to log peer connection stats.
     */
    private uploadStatsOnce;
    /**
     * Registers (starts) a specified callback to a specified event.
     *
     * @param event - The event to listen to.
     * @param callback - The callback that will called when the event is fired.
     */
    on<Key extends keyof PeerClientEventPayloads & string>(event: Key, callback: (value: PeerClientEventPayloads[Key]) => void, context?: object): void;
    /**
     * Deregisters (stops) a specified callback to a given event.
     *
     * @param event - The event to which the callback was registered.
     * @param callback - The callback to remove.
     */
    off<Key extends keyof PeerClientEventPayloads & string>(event: Key, callback: (value: PeerClientEventPayloads[Key]) => void, context?: object): void;
    /**
     * Returns a silent audio stream. Creates one if it doesn't already exist.
     *
     * @returns The silent audio stream.
     */
    private getSilentAudio;
    /**
     * Logs number of minutes of content published by the local participant.
     *
     * @param minutesLogged - Number of minutes of content published by the local participant.
     */
    private uploadMinutesPublished;
    getActionMeasurements(): {
        optionsDuration: number;
        postDuration: number;
        timeToCandidate: number;
        timeToConnected: number;
    };
    /**
     * getAudioSender returns the RTCRTPSender of the audio track if one exists
     *
     */
    getAudioSender(): RTCRtpSender | undefined;
    /**
     * getVideoSender returns the RTCRTPSender of the video track if one exists
     *
     */
    getVideoSender(): RTCRtpSender | undefined;
    private parseWhipLinkExtension;
    /**
     * Sets tracks for use on action connect()
     *
     * @param tracks - Tracks to set
     */
    setTracks(tracks: MediaStreamTrack[]): void;
}
