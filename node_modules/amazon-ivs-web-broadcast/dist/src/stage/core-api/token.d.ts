import { Action } from './constants';
import { type TraceId } from './analytics/random.uuid';
declare type ClaimsAttributes = {
    gs_role?: string;
    gs_session_id?: string;
};
declare type Claims = {
    resource: string;
    jti: string;
    events_url: string;
    whip_url: string;
    user_id?: string;
    exp?: number;
    version: string;
    attributes?: ClaimsAttributes;
    topic: string;
};
declare class StageToken {
    rawToken: string;
    header: Record<string, unknown> | undefined;
    claims: Claims;
    signature: string;
    stageARN: string;
    participantID: string;
    eventsURL: string;
    whipURL: string;
    topic: string;
    versionFlags?: number;
    userID?: string;
    expirationTime?: number;
    attrGsRole?: string;
    attrGsSessionId?: string;
    private analyticsTracker;
    constructor(encodedToken: string);
    getPublishEndpoint(): string;
    getSubscribeEndpoint(participantID: string): string;
    assertTokenIsUnexpired(traceId: TraceId, tag: string, location: string, identifier?: string): void;
    private parseVersionFlags;
    shouldUseTURN(): boolean;
    shouldSendSilentAudio(): boolean;
}
declare function parseStageToken(token: string): StageToken;
declare function parseTokenForDataplaneURL({ action, identifier, token, whipURLOverride, }: {
    action: Action;
    identifier?: string;
    token: string;
    whipURLOverride?: string;
}): string;
export { StageToken, parseStageToken, parseTokenForDataplaneURL };
