import { ConnectionState } from '../../client-common/broadcast-client-events';
import { PublishResponse, SubscribeResponse, TraceRequest } from '../../client-common/types';
import { type IStageEventEmitter, type Callback } from '../../client-common/emitter.types';
import { BroadcastClientError } from '../../client-common/errors';
import { type VideoComposition } from '../../client-common/media-stream-manager';
import { Logger } from '../../client-common/logger';
import { StageConfig } from '../core-api/configuration';
import { StageToken } from '../core-api/token';
import { TraceId } from '../core-api/analytics/random.uuid';
import { Participant, StageConnection } from '../core-api/stage-connection';
import { StageSubscription } from '../core-api/stage-subscription';
import { StagePublication } from '../core-api/stage-publication';
/**
 * A class implementing the Stages SDK .
 */
export declare class AmazonIVSBroadcastStageClient {
    #private;
    emitter: IStageEventEmitter;
    config: StageConfig;
    private nonScopedLogger;
    stageToken: StageToken | null;
    appTraceId: TraceId;
    stageConnection: StageConnection;
    useEdp: boolean;
    private analyticsTracker;
    private isValid;
    private subscriptions;
    private publication?;
    /**
     * Creates an instance of the AmazonIVSBroadcastStageClient.
     *
     * @param emitter - [[IStageEventEmitter]] A typed event emitter with events defined by [[BroadcastClientEventPayloads]].
     * @param config - [[Config]]
     * @param mediaStreamManager - [[MediaStreamManager]]
     * @param peerStatsTracker - [[PeerStatsTracker]]
     * @param logger - [[Logger]]
     */
    constructor(emitter: IStageEventEmitter, config: StageConfig, nonScopedLogger: Logger);
    /**
     * Propagate StageConnection events to the external event emitter.
     *
     * @param stageConnection - The client's StageConnection instance
     * @param emitter - Event emitter listened to by external clients
     */
    private propagateStageConnectionEvents;
    /**
     * Explicitly stop and/or free internal components that would otherwise leak.
     */
    delete(): void;
    /**
     * Joins an IVS Stage
     *
     * @throws Throws a [[BroadcastClientError]] if unable to stream.
     * @param token - IVS-generated token for the IVS Stage.
     */
    join(token: string): Promise<BroadcastClientError | void>;
    /**
     * Leaves the current Stage
     */
    leave(): void;
    /**
     * Publish to an IVS Stage
     *
     * @param token - IVS-generated token for the IVS Stage. If not provided client falls back to token used to join the stage.
     * @throws Throws a [[BroadcastClientError]] if unable to stream.
     */
    publish(token?: string): PublishResponse;
    /**
     * NOTE - THIS WILL BE DEPRECATED IN FAVOR OF publication.start().
     *
     * Stop publishing to the current Stage.
     */
    unpublish(token?: string): Promise<void>;
    /**
     * Creates a StageSubscription and starts it. Temporary API.
     *
     * @param remoteParticipantId - the remote participant's id to subscribe to
     * @param token - the participant token to use
     * @param silentAudioTrack - optional silent audio track
     * @returns - StageSubscription
     */
    createSubscription(remoteParticipantId: string, token: string, silentAudioTrack?: MediaStreamTrack): StageSubscription;
    createOrGetPublication(token: string): StagePublication;
    /**
     * NOTE - THIS WILL BE DEPRECATED IN FAVOR OF createSubscription() + subscription.start().
     *
     * Subscribe to a Participant in the Stage
     *
     * @throws Throws a [[BroadcastClientError]] if unable to subscribe
     * @param remoteParticipantId - Participant id to subscribe.
     * @param token - Optional Participant token to use for auth.
     * @param silentAudioTrack - Optional custom silentAudioTrack
     * @param audioOnly - Only subscribe to audio track
     */
    subscribe(remoteParticipantId: string, token?: string, silentAudioTrack?: MediaStreamTrack, audioOnly?: boolean): SubscribeResponse;
    /**
     * NOTE - THIS WILL BE DEPRECATED IN FAVOR OF createSubscription() + subscription.stop().
     *
     * Stop subscribing to given participant
     *
     * @param id - Participant id to unsubscribe.
     * @param token - Optional Participant token to use for auth.
     */
    unsubscribe(id: string, token?: string): Promise<void>;
    /**
     * Lists the participants the client is currently connected to.
     */
    listConnectedParticipants(): Array<Participant>;
    /**
     * Lists the all the Participants in the Stage.
     */
    listAvailableParticipants(): Array<Participant>;
    /**
     * Log events on behalf of SDK consumer application. Intended for external use only.
     * Note 'app' is prepended to the message for OpenSearch use.
     *
     * @param args - Trace request for which a TraceEvent should be sent.
     */
    _trace(args: TraceRequest): void;
    /**
     * Adds the specified video input to the broadcast stream.
     *
     * @param device - Video input to add to the stream.
     * @param name - Unique string you assign to the video-input device.
     * @param position - The desired position of the video in the stream.
     */
    addVideoInputDevice(device: MediaStream, name: string, position: VideoComposition): Promise<void>;
    /**
     * Adds the specified audio input to the broadcast stream.
     *
     * @param device - Audio input to add to the stream.
     * @param name - Unique string you assign to the audio-input device.
     */
    addAudioInputDevice(device: MediaStream, name: string): Promise<void>;
    /**
     * Gets the state of the webRTC connection.
     */
    getConnectionState(): ConnectionState;
    on<Key extends string>(event: Key, callback: Callback): void;
    off<Key extends string>(event: Key, callback: Callback): void;
    /**
     * Disables all video content from the stream.
     */
    disableVideo(): void;
    /**
     * Enables all video content from the stream if previously disabled.
     */
    enableVideo(): void;
    /**
     * Disables all audio content from the stream.
     */
    disableAudio(): void;
    /**
     * Enables all audio content from the stream if previously disabled.
     */
    enableAudio(): void;
}
