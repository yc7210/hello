/*! Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 */
import { TypedEmitter, EventMap } from '../core-api/typed-emitter';
import { StageParticipantInfo } from './stage-participant/stage-participant';
declare type GetStatsFunction = (track: MediaStreamTrack) => Promise<RTCStatsReport | undefined>;
/**
 * Base Class for common StageStream functionality
 */
export declare class StageStream<T extends EventMap = never> extends TypedEmitter<T> {
    id: string;
    streamType: StreamType;
    mediaStreamTrack: MediaStreamTrack;
    isMuted: boolean;
    private getStats?;
    constructor(track: MediaStreamTrack, getStats?: GetStatsFunction);
    setGetStats: (getStats: GetStatsFunction) => void;
    /**
     * Get the RTC Stats report for this media source
     */
    requestRTCStats: () => Promise<RTCStatsReport | undefined>;
    cleanup: () => void;
}
/**
 * A remote media stream in a stage
 */
export declare class RemoteStageStream extends StageStream {
    participantInfo: StageParticipantInfo;
    /**
     * Creates an instance of a StageStream
     *
     * @param track - The [[MediaStreamTrack]] that this StageStream wraps
     * @param info - The [[StageParticipantInfo]] that this StageStream corresponds to
     * @internal
     */
    constructor(track: MediaStreamTrack, info: StageParticipantInfo, getStats: GetStatsFunction);
    setMuted: (mute: boolean) => void;
}
export declare enum StreamType {
    AUDIO = "audio",
    VIDEO = "video"
}
export declare enum LocalStageStreamEvents {
    LOCAL_STREAM_MUTE_CHANGED = "localStreamMutedChanged"
}
declare type LocalStageStreamEventMap = {
    [LocalStageStreamEvents.LOCAL_STREAM_MUTE_CHANGED]: (stream: LocalStageStream) => void;
};
/**
 * A local media stream in a stage
 */
export declare class LocalStageStream extends StageStream<LocalStageStreamEventMap> {
    /**
     * Creates an instance of a LocalStageStream
     *
     * @param track - The [[MediaStreamTrack]] that this LocalStageStream wraps
     */
    constructor(track: MediaStreamTrack);
    /**
     * Updates the mute state of this LocalStageStream
     *
     * @param mute - The desired mute state of this LocalStageStream
     */
    setMuted: (mute: boolean) => void;
}
export {};
