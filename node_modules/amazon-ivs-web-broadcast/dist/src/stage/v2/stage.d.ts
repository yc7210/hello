import { LogLevels } from '../../client-common/logger/logger.types';
import { TypedEmitter } from '../core-api/typed-emitter';
import { StageConnectionState } from '../core-api/stage-connection';
import { StageStrategy } from './stage-strategy';
import { StageParticipantInfo, StageParticipantSubscribeState, StageParticipantPublishState } from './stage-participant/stage-participant';
import { StageStream } from './stage-stream';
declare global {
    interface Window {
        STAGES_LOG_LEVEL?: LogLevels;
    }
}
/**
 * A class impementing the Stages SDK
 */
export declare class Stage extends TypedEmitter<StageEventMap> {
    private strategy;
    private token;
    private stageConnection;
    private connectionState;
    private participants;
    private localParticipant?;
    private connectionStateErrored;
    private logger;
    private analyticsTracker;
    /**
     * Creates an instance of a Stage
     *
     * @param token - The token to join this stage as
     * @param strategy - The [[StageStrategy]] to use for this Stage
     */
    constructor(token: string, strategy: StageStrategy);
    private setupListeners;
    private onConnectionStateChanged;
    private onLocalParticipantJoined;
    private onRemoteParticipantJoined;
    private setupRemoteParticipantListeners;
    private onRemoteParticipantLeft;
    private emitParticipantLeave;
    private onRemoteParticipantStateChanged;
    private onPublishStateChanged;
    private onParticipantSubscribeStateChanged;
    private onLocalStreamsAdded;
    private onLocalStreamsRemoved;
    private onStreamMuteChange;
    /**
     * Joins the stage
     */
    join(): Promise<void>;
    /**
     * Leaves the stage
     */
    leave: () => void;
    /**
     * Re-executes the [[StageStrategy]]
     */
    refreshStrategy: () => void;
    /**
     * Updates and re-executes the [[StageStrategy]]
     *
     * @param strategy - The new [[StageStrategy]] for the stage
     */
    replaceStrategy(strategy: StageStrategy): void;
    private updateStreamsToPublishIfNecessary;
    private syncLocalTracks;
}
export { StageConnectionState };
declare type StageEventMap = {
    [StageEvents.STAGE_CONNECTION_STATE_CHANGED]: (state: StageConnectionState) => void;
    [StageEvents.STAGE_PARTICIPANT_JOINED]: (participantInfo: StageParticipantInfo) => void;
    [StageEvents.STAGE_PARTICIPANT_LEFT]: (participantInfo: StageParticipantInfo) => void;
    [StageEvents.STAGE_PARTICIPANT_PUBLISH_STATE_CHANGED]: (participantInfo: StageParticipantInfo, state: StageParticipantPublishState) => void;
    [StageEvents.STAGE_PARTICIPANT_SUBSCRIBE_STATE_CHANGED]: (participantInfo: StageParticipantInfo, state: StageParticipantSubscribeState) => void;
    [StageEvents.STAGE_PARTICIPANT_STREAMS_ADDED]: (participantInfo: StageParticipantInfo, streams: StageStream[]) => void;
    [StageEvents.STAGE_PARTICIPANT_STREAMS_REMOVED]: (participantInfo: StageParticipantInfo, streams: StageStream[]) => void;
    [StageEvents.STAGE_STREAM_MUTE_CHANGED]: (participantInfo: StageParticipantInfo, stream: StageStream) => void;
};
export declare enum StageEvents {
    /**
     * Invoked when the local connection to the stage has changed.
     *
     * @param payload - StageConnectionState
     * @event stageConnectionStateChanged
     */
    STAGE_CONNECTION_STATE_CHANGED = "stageConnectionStateChanged",
    /**
     * Indicates that a remote participant joined the stage.
     *
     * @param payload - StageParticipantInfo
     * @event stageParticipantJoined
     */
    STAGE_PARTICIPANT_JOINED = "stageParticipantJoined",
    /**
     * Indicates that a participant left the stage.
     *
     * @param payload - StageParticipantInfo
     * @event stageParticipantLeft
     */
    STAGE_PARTICIPANT_LEFT = "stageParticipantLeft",
    /**
     * Indicates that a stream(s) have been added for a participant.
     *
     * @param payload - [ StageParticipantInfo, StageStream[] ]
     * @event stageParticipantStreamsAdded
     */
    STAGE_PARTICIPANT_STREAMS_ADDED = "stageParticipantStreamsAdded",
    /**
     * Indicates that a stream(s) have been removed for a participant.
     *
     * @param payload - [ StageParticipantInfo, StageStream[] ]
     * @event stageParticipantStreamsRemoved
     */
    STAGE_PARTICIPANT_STREAMS_REMOVED = "stageParticipantStreamsRemoved",
    /**
     * Indicates that a stream's mute state has changed
     *
     * @param payload - [ StageParticipantInfo, StageStream ]
     * @event stagesStreamMuteChanged
     */
    STAGE_STREAM_MUTE_CHANGED = "stageStreamMuteChanged",
    /**
     * Indicates a change to participant subscribtion state
     *
     * @param payload - [ StageParticipantInfo, StageParticipantSubscribeState ]
     * @event stageParticipantSubscribeStateChanged
     */
    STAGE_PARTICIPANT_SUBSCRIBE_STATE_CHANGED = "stageParticipantSubscribeStateChanged",
    /**
     * Indicates a change to participant publish state
     *
     * @param payload - [ StageParticipantInfo, StageParticipantPublishState ]
     * @event stageParticipantPublishStateChanged
     */
    STAGE_PARTICIPANT_PUBLISH_STATE_CHANGED = "stageParticipantPublishStateChanged"
}
