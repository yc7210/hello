/*! Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 */
import { RemoteStageStream, LocalStageStream } from '../stage-stream';
import { StageParticipantInfo, StageParticipantPublishState, StageParticipantSubscribeState } from './stage-participant';
declare enum BaseParticipantEvents {
    /**
     * Indicates that participant state has changed
     *
     * @param payload - [[StageParticipantInfo]]
     * @event stateChange
     */
    STATE_CHANGE = "stateChange",
    /**
     * Indicates that a participant media stream has been added
     *
     * @param payload - [[RemoteStageStream[] | LocalStageStream[]]]
     * @event mediaStreamAdded
     */
    MEDIA_STREAM_ADDED = "mediaStreamAdded",
    /**
     * Indicates that a participant media stream has been removed
     *
     * @param payload - [[RemoteStageStream[] | LocalStageStream[]]]
     * @event mediaStreamRemoved
     */
    MEDIA_STREAM_REMOVED = "mediaStreamRemoved",
    /**
     * Indicates that a participant media stream mute state has changed
     *
     * @param payload - [[RemoteStageStream | LocalStageStream]]
     * @event mediaStreamMuteChanged
     */
    MEDIA_STREAM_MUTE_CHANGED = "mediaStreamMuteChanged"
}
declare enum BaseRemoteParticipantEvents {
    /**
     * Indicates that subscription state has changed
     *
     * @param payload - [[StageParticipantSubscribeState]]
     * @event subscriptionStateChange
     */
    SUBSCRIPTION_STATE_CHANGE = "subscriptionStateChange"
}
export declare const RemoteParticipantEvents: {
    SUBSCRIPTION_STATE_CHANGE: BaseRemoteParticipantEvents.SUBSCRIPTION_STATE_CHANGE;
    STATE_CHANGE: BaseParticipantEvents.STATE_CHANGE;
    MEDIA_STREAM_ADDED: BaseParticipantEvents.MEDIA_STREAM_ADDED;
    MEDIA_STREAM_REMOVED: BaseParticipantEvents.MEDIA_STREAM_REMOVED;
    MEDIA_STREAM_MUTE_CHANGED: BaseParticipantEvents.MEDIA_STREAM_MUTE_CHANGED;
};
export declare type RemoteParticipantEvents = typeof RemoteParticipantEvents;
export declare type RemoteParticipantEventMap = {
    [RemoteParticipantEvents.SUBSCRIPTION_STATE_CHANGE]: (state: StageParticipantSubscribeState) => void;
    [RemoteParticipantEvents.STATE_CHANGE]: (info: StageParticipantInfo) => void;
    [RemoteParticipantEvents.MEDIA_STREAM_ADDED]: (streams: RemoteStageStream[]) => void;
    [RemoteParticipantEvents.MEDIA_STREAM_REMOVED]: (streams: RemoteStageStream[]) => void;
    [RemoteParticipantEvents.MEDIA_STREAM_MUTE_CHANGED]: (stream: RemoteStageStream) => void;
};
declare enum BaseLocalParticipantEvents {
    /**
     * Indicates that publication state has changed
     *
     * @param payload - [[StageParticipantPublishState]]
     * @event subscriptionStateChange
     */
    PUBLICATION_STATE_CHANGE = "publicationStateChange"
}
export declare const LocalParticipantEvents: {
    PUBLICATION_STATE_CHANGE: BaseLocalParticipantEvents.PUBLICATION_STATE_CHANGE;
    STATE_CHANGE: BaseParticipantEvents.STATE_CHANGE;
    MEDIA_STREAM_ADDED: BaseParticipantEvents.MEDIA_STREAM_ADDED;
    MEDIA_STREAM_REMOVED: BaseParticipantEvents.MEDIA_STREAM_REMOVED;
    MEDIA_STREAM_MUTE_CHANGED: BaseParticipantEvents.MEDIA_STREAM_MUTE_CHANGED;
};
export declare type LocalParticipantEvents = typeof LocalParticipantEvents;
export declare type LocalParticipantEventMap = {
    [LocalParticipantEvents.PUBLICATION_STATE_CHANGE]: (state: StageParticipantPublishState) => void;
    [LocalParticipantEvents.MEDIA_STREAM_REMOVED]: (streams: LocalStageStream[]) => void;
    [LocalParticipantEvents.MEDIA_STREAM_MUTE_CHANGED]: (stream: LocalStageStream) => void;
};
export {};
