/*! Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 */
import { StageConnection } from '../../core-api/stage-connection';
import { StageToken } from '../../core-api/token';
import { Logger } from '../../../client-common/logger';
import { LocalStageStream } from '../stage-stream';
import { StageParticipant, StageParticipantInfo } from './stage-participant';
import { LocalParticipantEventMap } from './events';
/**
 * A remote participant in a stage
 */
export declare class LocalStageParticipant extends StageParticipant<LocalParticipantEventMap> {
    private publication;
    private connection;
    audioStream?: LocalStageStream;
    videoStream?: LocalStageStream;
    private createPublication;
    constructor(info: StageParticipantInfo, token: StageToken, logger: Logger, connection: StageConnection);
    private onPublicationStateChange;
    private updatePublishState;
    handleMute: (stream: LocalStageStream) => void;
    /**
     * Start publishing
     *
     * @internal
     */
    publish: (streams: [Maybe<LocalStageStream>, Maybe<LocalStageStream>]) => void;
    private setupStreamListener;
    removeTrack(stream: LocalStageStream): void;
    replaceOrAddTrack(stream: LocalStageStream): Promise<void>;
    /**
     * Unpublish
     *
     * @internal
     */
    unpublish(): void;
    cleanup: () => void;
    /**
     * Unpublish without doing anything else.
     *
     * @internal
     */
    quickUnpublish: () => false | undefined;
}
