/*! Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 */
import { SubscribeType } from '../../core-api/stage-subscription';
import { StageToken } from '../../core-api/token';
import { StageConnection } from '../../core-api/stage-connection';
import { Logger } from '../../../client-common/logger';
import { RemoteStageStream } from '../stage-stream';
import { StageParticipant, StageParticipantInfo, StageParticipantSubscribeState } from './stage-participant';
import { RemoteParticipantEventMap } from './events';
/**
 * A remote participant in a stage
 */
export declare class RemoteStageParticipant extends StageParticipant<RemoteParticipantEventMap> {
    private subscription;
    subscribeState: StageParticipantSubscribeState;
    desiredSubscribeType: SubscribeType;
    streams: RemoteStageStream[];
    private createSubscription;
    constructor(info: StageParticipantInfo, token: StageToken, connection: StageConnection, logger: Logger, subscribeType: SubscribeType, isPublishing?: boolean);
    private onSubscriptionStateChange;
    private onSubscriptionMediaStream;
    updateSubscribeStateIfNecessary: (newSubscribeType: SubscribeType) => void;
    updatePublishState: (isPublishing: boolean) => boolean;
    updateStreamState: (audioMuted: boolean, videoStopped: boolean) => void;
    private updateStreamMuteState;
    /**
     * Start subscribing to this participant
     *
     * @internal
     */
    subscribe(): void;
    /**
     * Unsubscribe from this participant
     *
     * @internal
     */
    unsubscribe(): void;
    cleanup: () => void;
    /**
     * Unsubscribe from this participant without doing anything else.
     *
     * @internal
     */
    quickUnsubscribe: () => false | void;
}
