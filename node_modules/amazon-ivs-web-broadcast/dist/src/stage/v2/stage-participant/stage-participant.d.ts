/*! Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 */
import { ScopedLogger } from '../../../client-common/logger';
import { Participant } from '../../core-api/stage-connection';
import { StageToken } from '../../core-api/token';
import { TypedEmitter, EventMap } from '../../core-api/typed-emitter';
/**
 * A remote or local participant in a stage
 */
export declare class StageParticipant<T extends EventMap> extends TypedEmitter<T> {
    info: StageParticipantInfo;
    audioMuted: boolean;
    videoStopped: boolean;
    logger: ScopedLogger;
    publishState: StageParticipantPublishState;
    /**
     * Creates an instance of StageParticipant
     *
     * @param info - The [[StageParticipantInfo]] for this participant
     * @internal
     */
    constructor(info: StageParticipantInfo, logger: ScopedLogger);
}
export declare type StageParticipantInfo = {
    readonly id: string;
    readonly userId: string;
    readonly attributes: Record<string, unknown>;
    readonly capabilities: Set<StageParticipantCapabilities>;
    readonly isLocal: boolean;
    readonly userInfo: Record<string, unknown>;
    videoStopped: boolean;
    audioMuted: boolean;
    isPublishing: boolean;
};
export declare function createRemoteParticipantInfo(participant: Participant): StageParticipantInfo;
declare type createLocalParticipantParams = {
    token: StageToken;
    videoStopped: boolean;
    audioMuted: boolean;
    isPublishing: boolean;
};
export declare function createLocalParticipantInfo(params: createLocalParticipantParams): StageParticipantInfo;
export declare enum StageParticipantCapabilities {
    /**
     * A participant can publish.
     */
    PUBLISH = "publish",
    /**
     * A participant can be subscribed to or not.
     */
    SUBSCRIBE = "subscribe"
}
export declare enum StageParticipantPublishState {
    NOT_PUBLISHED = "not_published",
    ATTEMPTING_PUBLISH = "attempting_publish",
    PUBLISHED = "published",
    ERRORED = "errored"
}
export declare enum StageParticipantSubscribeState {
    NOT_SUBSCRIBED = "not_subscribed",
    ATTEMPTING_SUBSCRIBE = "attempting_subscribe",
    SUBSCRIBED = "subscribed",
    ERRORED = "errored"
}
export {};
