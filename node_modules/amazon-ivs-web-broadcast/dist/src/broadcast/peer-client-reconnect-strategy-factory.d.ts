import { IEventEmitter } from '../client-common/emitter.types';
import { ScopedLogger } from '../client-common/logger';
import { NetworkReconnectConfig } from './configuration';
import { PeerClient } from './peer-client';
export interface ReconnectStrategy {
    onFailure(callback: () => void): void;
    id: string;
    execute: () => void;
    isActive: () => boolean;
    setStartConfig: (ingestEndpoint: string, streamKey: string) => void;
    stop: () => void;
}
export declare enum ReconnectStrategyState {
    IDLE = "idle",
    EXECUTING = "executing",
    RECONNECTING = "reconnecting"
}
/**
 * Base class for reconnect strategies. Strategies should extend this.
 */
declare abstract class BaseReconnectStrategy implements ReconnectStrategy {
    abstract id: string;
    state: ReconnectStrategyState;
    protected logger: ScopedLogger;
    private emitter;
    private timeout;
    private ingestEndpoint;
    private streamKey;
    private peerClient;
    private timeoutTimerId;
    /**
     * Callback that gets executed on strategy failure.
     */
    private failureCallback;
    /**
     * Creates a BaseReconnectStrategy.
     *
     * @param peerClient - The PeerClient to be used by the strategy.
     * @param timeout - The number of MS before stopping reconnect execution.
     * @param logger - The logger to use for the strategy.
     * @param emitter - The emitter to emit reconnect events to.
     */
    constructor(peerClient: PeerClient, timeout: number | undefined, logger: ScopedLogger, emitter: IEventEmitter);
    /**
     * Used to set the failure callback.
     *
     * @param callback - The callback to execute on failure of the strategy.
     */
    onFailure(callback: () => void): void;
    /**
     * Persists connection configuration so the strategy can restart it as required.
     *
     * @param ingestEndpoint - The ingest endpoint URL.
     * @param streamKey - The stream key.
     */
    setStartConfig(ingestEndpoint: string, streamKey: string): void;
    /**
     * Starts execution of the strategy.
     */
    execute(): void;
    /**
     * Starts a timer that stops the strategy after a given timeout duration.
     *
     * @param timeout - The number of MS after which to stop the strategy.
     */
    private startTimeoutTimer;
    /**
     * Implementors should override and implement this method with
     * their strategy.
     */
    abstract executeStrategy(): void;
    /**
     * Responsible for cleaning up events/timeouts and resetting the strategy.
     */
    stop(): void;
    /**
     * Implementors should override to cleanup their strategy as necessary.
     */
    abstract stopStrategy(): void;
    /**
     * Attempts a reconnects to webgest
     */
    protected reconnect(): Promise<void>;
    /**
     * Exposes whether the strategy is currently active.
     *
     * @returns If the strategy is currently reconnecting.
     */
    isActive(): boolean;
}
/**
 * A strategy that implements a exponential backoff reconnect.
 */
export declare class ExponentialBackoffStrategy extends BaseReconnectStrategy {
    id: string;
    currentTimeoutId: number | undefined;
    /**
     * Overrides the parent execute method.
     */
    executeStrategy(): void;
    /**
     * Let's override to stop further execution of the timeout
     */
    stopStrategy(): void;
}
/**
 * A reconnect strategy that uses the Network API to subscribe to reconnect events and attempts reconnection.
 */
export declare class NetworkApiStrategy extends BaseReconnectStrategy {
    id: string;
    /**
     * Overrides the parent execute method.
     */
    executeStrategy(): void;
    /**
     * Called when network changes are detected.
     */
    private onConnectionChange;
    /**
     * Let's cleanup the event listener
     */
    stopStrategy(): void;
}
/**
 * Factory that creates a reconnect strategy based on configuration and browser supported APIs.
 */
export declare class PeerClientReconnectStrategyFactory {
    /**
     * Creates a strategy.
     *
     * @param peerClient - The PeerClient.
     * @param config - The SDK config object.
     * @param logger - A ScopedLogger to log messages.
     * @param emitter - A event emitter to emit reconnect events to.
     * @returns - The ReconnectStrategy based on inputs.
     */
    static create(peerClient: PeerClient, config: NetworkReconnectConfig | undefined, logger: ScopedLogger, emitter: IEventEmitter): ReconnectStrategy | undefined;
}
export {};
