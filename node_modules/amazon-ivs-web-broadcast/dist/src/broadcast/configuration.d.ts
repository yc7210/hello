import { Logger, LogLevels } from '../client-common/logger/logger.types';
export declare const MIN_BITRATE = 200;
export declare const MAX_BITRATE = 8500;
export declare const MIN_FRAMERATE = 10;
export declare const MAX_FRAMERATE = 60;
export declare const MIN_RESOLUTION = 160;
export declare const MAX_RESOLUTION = 1920;
export declare const SECONDARY_MAX_RESOLUTION = 1080;
export declare const streamConfigErrorDetails = "missing stream configuration";
export declare const bitrateErrorDetails: string;
export declare const framerateErrorDetails: string;
export declare const resolutionErrorDetails: string;
/**
 * The stream's configured resolution as defined by its width and height.
 * Must be a value between 160 and 1920, with 1920x1080 or 1080x1920 being maximum resolutions.
 */
export interface ResolutionConfig {
    /**
     * Integer representing the stream resolution's width in pixels.
     */
    width: number;
    /**
     * Integer representing the stream resolution's height in pixels.
     */
    height: number;
}
/**
 * The configuration for a stream detailing its maximum capabilities.
 * maxFramerate must be between 10-60, and maxBitrate must be between 200-8500
 */
export interface StreamConfig {
    maxResolution: ResolutionConfig;
    maxFramerate: number;
    maxBitrate: number;
}
/**
 * The configuration used to initialize the BroadcastClient.
 */
export interface BroadcastClientConfig {
    /**
     * URL used to communicate with the WebRTC backend.
     * If provided an rtmps url, we will convert it to a usable https url.
     */
    ingestEndpoint?: string;
    /**
     * A stream configuration matching one's IVS account configuration.
     */
    streamConfig?: StreamConfig;
    logLevel?: LogLevels;
    logger?: Partial<Logger>;
    networkReconnectConfig?: NetworkReconnectConfig;
}
export declare const DEFAULT_LOG_LEVEL = LogLevels.ERROR;
/**
 * A static `landscape` stream configuration for a `Basic` IVS account.
 *
 * @category Stream Config
 */
export declare const BASIC_LANDSCAPE: StreamConfig;
/**
 * A static `portrait` stream configuration for a `Basic` IVS account.
 *
 * @category Stream Config
 */
export declare const BASIC_PORTRAIT: StreamConfig;
/**
 * A static `landscape` stream configuration for a `Basic` 1080p IVS account.
 *
 * @category Stream Config
 */
export declare const BASIC_FULL_HD_LANDSCAPE: StreamConfig;
/**
 * A static `portrait` stream configuration for a `Basic` 1080p IVS account.
 *
 * @category Stream Config
 */
export declare const BASIC_FULL_HD_PORTRAIT: StreamConfig;
/**
 * A static `landscape` stream configuration for a `Standard` IVS account.
 *
 * @category Stream Config
 */
export declare const STANDARD_LANDSCAPE: StreamConfig;
/**
 * A static `portrait` stream configuration for a `Standard` IVS account.
 *
 * @category Stream Config
 */
export declare const STANDARD_PORTRAIT: StreamConfig;
export interface DefaultConfig {
    LOG_LEVEL: typeof LogLevels;
    BASIC_LANDSCAPE: typeof BASIC_LANDSCAPE;
    BASIC_PORTRAIT: typeof BASIC_PORTRAIT;
    BASIC_FULL_HD_LANDSCAPE: typeof BASIC_FULL_HD_LANDSCAPE;
    BASIC_FULL_HD_PORTRAIT: typeof BASIC_FULL_HD_PORTRAIT;
    STANDARD_LANDSCAPE: typeof STANDARD_LANDSCAPE;
    STANDARD_PORTRAIT: typeof STANDARD_PORTRAIT;
}
export declare const defaultConfig: DefaultConfig;
export interface NetworkReconnectConfig {
    reconnect: boolean;
    timeout?: number;
}
export declare const defaultNetworkReconnectConfig: NetworkReconnectConfig;
/**
 * Checks if the ingestEndpoint is a valid string or empty type.
 * if so, it converts it to a webgest url if necessary.
 * If it isn't, it throws an error.
 *
 * @param ingestEndpoint - Endpoint to consume the broadcast
 */
export declare function convertIngestEndpoint(ingestEndpoint: string | undefined): string;
export declare type ConfigurationInstance = Partial<BroadcastClientConfig> & DefaultConfig;
/**
 * The Config class is a singleton that holds the configuration for the application
 */
export declare class Config {
    #private;
    LOG_LEVEL: typeof LogLevels;
    BASIC_LANDSCAPE: StreamConfig;
    BASIC_PORTRAIT: StreamConfig;
    BASIC_FULL_HD_LANDSCAPE: StreamConfig;
    BASIC_FULL_HD_PORTRAIT: StreamConfig;
    STANDARD_LANDSCAPE: StreamConfig;
    STANDARD_PORTRAIT: StreamConfig;
    constructor(ingestEndpojnt?: string, logLevel?: LogLevels, streamConfig?: StreamConfig, logger?: Partial<Logger>, networkReconnectConfig?: NetworkReconnectConfig);
    /**
     * Get the ingest endpoint from the config file.
     *
     * @returns The ingest endpoint.
     */
    get ingestEndpoint(): string | undefined;
    /**
     * Set the ingest endpoint to the new value, and validates that the new value is valid.
     * If the rtmps ingest server is provided, this function attempts to converts it to a valid 'https' endpoint.
     * If the provided ingest endpoint is invalid, it throws an error.
     *
     * @param newIngestEndpoint - The new value of the ingestEndpoint property.
     */
    set ingestEndpoint(newIngestEndpoint: string | undefined);
    /**
     * Get the stream config.
     *
     * @returns The streamConfig property is a getter that returns the streamConfig property of the class.
     */
    get streamConfig(): StreamConfig;
    /**
     * Set the streamConfig property to the newStreamConfig parameter.
     *
     * The function is a setter, so it has a special name
     *
     * @param newStreamConfig - The new stream configuration.
     */
    set streamConfig(newStreamConfig: unknown);
    /**
     * Get the log level.
     *
     * @returns The log level.
     */
    get logLevel(): LogLevels | undefined;
    /**
     * Set the log level to the given value.
     *
     * @param newLogLevel - The new log level to set.
     */
    set logLevel(newLogLevel: unknown);
    /**
     * Get the logger property from the config.
     *
     * @returns The logger property is being returned.
     */
    get logger(): Partial<Logger> | undefined;
    /**
     * Set the logger property.
     *
     * @param newLogger - The new logger to set.
     */
    set logger(newLogger: Partial<Logger> | undefined);
    /**
     * Get the network reconnect configuration
     *
     * @returns The network reconnect config property is being returned.
     */
    get networkReconnectConfig(): NetworkReconnectConfig | undefined;
    /**
     * Set the network reconnect config property.
     *
     * @param newNetworkReconnectConfig - The new network reconnect config to set.
     */
    set networkReconnectConfig(newNetworkReconnectConfig: NetworkReconnectConfig | undefined);
}
