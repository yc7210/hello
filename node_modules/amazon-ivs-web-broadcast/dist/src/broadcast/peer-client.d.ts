import { ConnectionState } from '../client-common/broadcast-client-events';
import { type IEventEmitter } from '../client-common/emitter.types';
import { Logger } from '../client-common/logger';
import { Report } from '../client-common/peer-client.types';
import { type Config } from './configuration';
/**
 * Asserts whether the RTCPeerConnection has been assigned.
 *
 * @param {RTCPeerConnection} peerConnection - An instance of the RTCPeerConnection.
 */
export declare function isPeerConnectionAssigned(peerConnection?: RTCPeerConnection): asserts peerConnection is RTCPeerConnection;
/**
 * A utility class wrapping the RTCPeerConnection instantiation and lifecycle management.
 */
export declare class PeerClient {
    #private;
    private config;
    private emitter;
    /**
     * @param peerConnection - An RTCPeerConnection.
     */
    peerConnection?: RTCPeerConnection;
    private ingestSessionId?;
    private connectionStartDate?;
    private disconnectionStartDate?;
    private stateCheckInterval?;
    private logger;
    private stopStreamDataChannel?;
    private reconnectStrategy?;
    private analyticsTracker;
    /**
     * Creates an instance of the [[PeerClient]].
     *
     * @param config - [[Config]]
     * @param emitter - [[IEventEmitter]] A typed event emitter with events defined by [[BroadcastClientEventPayloads]].
     * @param logger - An instance of [[Logger]].
     */
    constructor(config: Config, emitter: IEventEmitter, logger: Logger);
    /**
     * Sets up the peer client to have the audio tracks and a connection
     *
     * @param ingestEndpoint - Configuration object to establish the connection to IVS.
     * @param streamKey - A broadcaster's stream key.
     */
    start(ingestEndpoint: string, streamKey: string): Promise<void>;
    /**
     * Establishes a WebRTC connection with IVS at the configured ingestEndpoint.
     *
     * @param ingestEndpoint - URL to establish the connection to IVS.
     * @param streamKey - streamKey to authorize the connection to IVS.
     */
    private establishConnection;
    /**
     * Terminates the WebRTC IVS connection and does a clean up of the RTCPeerConnection.
     */
    stop(): void;
    /**
     * Get the current ingest session ID.
     *
     * @returns Current ingest session ID
     */
    getSessionId: () => string | undefined;
    /**
     * Gets the current state of the [[RTCPeerConnection]].
     */
    getConnectionState: () => ConnectionState;
    /**
     * Iterates over the array of provided MediaStreamTracks and adds them to the peer connection.
     *
     * @param data - Configuration object to add tracks.
     * @param data.tracks - An array of MediaStreamTracks.
     */
    addTracks(data: {
        tracks: MediaStreamTrack[];
    }): void;
    /**
     * Gets the list of reports from the RTCStatsReport array.
     */
    getReports(): Promise<Report[]>;
    /**
     * Emits Spade events with media track stats on [[ConnectionState]] changes.
     *
     * @private
     */
    private onConnectionStateChange;
    /**
     * Sends a WebRTC offer to the IVS backend.
     *
     * @param ingestEndpoint - URL to establish the connection to IVS.
     * @param streamKey - streamKey to authorize the connection to IVS
     * @param description - An RTCSessionDescriptionInit used to send the offer to the IVS backend.
     * @private
     */
    private sendSetupRequest;
    /**
     * Sets the WebRTC local description.
     *
     * @param description - A local RTCSessionDescriptionInit object.
     * @private
     */
    private handleLocalDescription;
    /**
     * Handles errors that should result in a terminal failure.
     *
     * @private
     */
    private handleTerminalConnectionFailure;
    /**
     * Handles incoming errors from the IVS backend.
     *
     * @param code - An error code.
     * @param message - An error message.
     * @private
     */
    private handleError;
    /**
     * Allows us to create the RTCPeerConnection if it was destroyed.
     *
     * @private
     */
    createPeerConnection(): void;
    /**
     * Creates a reconnect strategy for this PeerClient
     *
     * @param config - The config used to create the PeerClient.
     */
    private createReconnectStrategy;
}
