export declare const BROADCAST_ERROR: {
    readonly name: "BroadcastError";
    readonly code: 1000;
    readonly message: "Unable to broadcast";
};
export declare const CAMERA_ERROR: {
    readonly name: "CameraError";
    readonly code: 2000;
    readonly message: "Camera could not be captured";
};
export declare const INPUT_ERROR: {
    readonly name: "InputError";
    readonly code: 3000;
    readonly message: "Input could not be attached";
};
export declare const ADD_DEVICE_DEVICE_ERROR: {
    readonly name: "AddDeviceError";
    readonly code: 4000;
    readonly message: "Device is missing";
};
export declare const ADD_DEVICE_NAME_EXISTS_ERROR: {
    readonly name: "AddDeviceNameExistsError";
    readonly code: 4001;
    readonly message: "Name is already registered";
};
export declare const ADD_DEVICE_COMPOSITION_MISSING_ERROR: {
    readonly name: "AddDeviceCompositionMissingError";
    readonly code: 4002;
    readonly message: "VideoComposition is missing";
};
export declare const ADD_DEVICE_COMPOSITION_INDEX_MISSING_ERROR: {
    readonly name: "AddDeviceCompositionIndexMissingError";
    readonly code: 4003;
    readonly message: "VideoComposition's \"index\" property is missing";
};
export declare const ADD_DEVICE_NAME_MISSING_ERROR: {
    readonly name: "AddDeviceNameMissingError";
    readonly code: 4004;
    readonly message: "Name property is missing";
};
export declare const ADD_DEVICE_UNSUPPORTED: {
    name: string;
    code: number;
    message: string;
};
export declare const REMOVE_DEVICE_NOT_FOUND_ERROR: {
    readonly name: "RemoveDeviceNotFoundError";
    readonly code: 5000;
    readonly message: "Device not found";
};
export declare const REMOVE_IMAGE_NOT_FOUND_ERROR: {
    readonly name: "RemoveImageNotFoundError";
    readonly code: 6000;
    readonly message: "Image not found";
};
export declare const UPDATE_VIDEO_DEVICE_COMPOSITION_MISSING_ERROR: {
    readonly name: "UpdateVideoDeviceCompositionMissingError";
    readonly code: 7000;
    readonly message: "VideoComposition is missing";
};
export declare const UPDATE_VIDEO_DEVICE_COMPOSITION_INDEX_MISSING_ERROR: {
    readonly name: "UpdateVideoDeviceCompositionIndexMissingError";
    readonly code: 7001;
    readonly message: "VideoComposition's \"index\" property is missing";
};
export declare const UPDATE_VIDEO_DEVICE_COMPOSITION_NAME_NOT_FOUND_ERROR: {
    readonly name: "UpdateVideoDeviceCompositionNameMissingError";
    readonly code: 7002;
    readonly message: "Video device with that name is not found";
};
export declare const EXCHANGE_POSITION_DEVICE_NOT_FOUND_ERROR: {
    readonly name: "ExchangePositionDeviceNotFoundError";
    readonly code: 8000;
    readonly message: "Device with that name is not found";
};
export declare const FAILED_TO_ADD_IMAGE_ERROR: {
    readonly name: "FailedToAddImageError";
    readonly code: 9000;
    readonly message: "Failed to add image";
};
export declare const PEER_SETUP_ERROR: {
    readonly name: "PeerSetupError";
    readonly code: 10000;
    readonly message: "Unexpected return value from setup request";
};
export declare const PEER_CONNECTION_ERROR: {
    readonly name: "PeerConnectionError";
    readonly code: 10001;
    readonly message: "Peer connection has failed.";
};
export declare const INVALID_STREAM_KEY: {
    readonly name: "InvalidStreamKey";
    readonly code: 10003;
    readonly message: "Invalid Stream Key.";
};
export declare const BROADCAST_CONFIGURATION_ERROR: {
    readonly name: "BroadcastConfigurationError";
    readonly code: 11000;
    readonly message: "Error when configuring broadcast client";
};
export declare const STREAM_CONFIGURATION_ERROR: {
    readonly name: "StreamConfigurationError";
    readonly code: 12000;
    readonly message: "Error when configuring stream";
};
export declare const INGEST_ENDPOINT_TYPE_ERROR: {
    readonly name: "IngestEndpointTypeError";
    readonly code: 13000;
    readonly message: "Ingest endpoint must be a string";
};
export declare const INGEST_ENDPOINT_URL_ERROR: {
    readonly name: "IngestEndpointUrlError";
    readonly code: 13001;
    readonly message: "Ingest endpoint must be a valid https or rtmps URL";
};
export declare const LOG_LEVEL_TYPE_ERROR: {
    readonly name: "LogLevelTypeError";
    readonly code: 14000;
    readonly message: "Log Level must be a valid integer between [0..5]";
};
export declare const LOGGER_TYPE_ERROR: {
    readonly name: "LoggerTypeError";
    readonly code: 15000;
    readonly message: "Logger must be an object";
};
export declare const CLIENT_INVALID_ERROR: {
    readonly name: "ClientInvalidError";
    readonly code: 16000;
    readonly message: "Client is no longer valid, possibly due to delete() invocation.";
};
export declare const NETWORK_RECONNECT_CONFIGURATION_ERROR: {
    readonly name: "NetworkReconnectConfigurationError";
    readonly code: 17000;
    readonly message: "Error when configuring network reconnect";
};
export declare const NETWORK_RECONNECT_CONFIGURATION_INVALID_TIMEOUT_ERROR: {
    readonly name: "NetworkReconnectConfigurationInvalidTimeoutError";
    readonly code: 17001;
    readonly message: `Network reconnect timeout value must be a number between [10000, ${number}]`;
};
export declare const STREAM_KEY_INVALID_CHAR_ERROR: {
    readonly name: "StreamKeyInvalidCharError";
    readonly code: 18000;
    readonly message: "Streamkey must contain only [A-Za-z0-9_-] characters";
};
export declare const STAGE_TOKEN_TYPE_ERROR: {
    readonly name: "StageTokenTypeError";
    readonly code: 19000;
    readonly message: "Stage token must be a string";
};
export declare const STAGE_WHIP_OVERRIDE_ERROR: {
    readonly name: "StageWhipUrlOverrideError";
    readonly code: 19001;
    readonly message: "Stage WHIP override URL must be a string starting with http";
};
