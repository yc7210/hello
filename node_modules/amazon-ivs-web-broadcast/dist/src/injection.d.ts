import { Container, interfaces } from 'inversify';
import { BroadcastClientConfig } from './broadcast/configuration';
declare const container: Container;
declare const lazyInject: (serviceIdentifier: string | symbol | interfaces.Newable<any> | interfaces.Abstract<any>) => (proto: any, key: string) => void;
export { lazyInject, container };
/**
 * It registers all values with the DI container.
 */
export declare const initRegister: () => void;
/**
 * Make a child container with a unique Config binding derived from the provided BroadcastClientConfig
 *
 * @param config - BroadcastClientConfig from which to populate the Config
 */
export declare const childInstance: (config: BroadcastClientConfig) => Container;
